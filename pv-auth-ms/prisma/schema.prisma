// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  users       User[]       @relation()
  // RolePermission RolePermission[]
  roleModule  RoleModule[]

  @@map("roles")
}

model Permission {
  id                   String                 @id @default(uuid())
  name                 String         @unique
  roleModulePermission RoleModulePermission[]

  @@map("permissions")
}

model Module {
  id             String   @id @default(uuid())
  name           String   @unique
  parentModuleId String?  @map("parent_module_id") // Para identificar subm√≥dulos
  parentModule   Module?  @relation("ParentChildModules", fields: [parentModuleId], references: [id])
  subModules     Module[] @relation("ParentChildModules")

  roleModules RoleModule[]

  @@map("modules")
}

model RoleModule {
  id                   String                 @id @default(uuid())
  roleId               String                 @map("role_id")
  moduleId             String                 @map("module_id")
  role                 Role                   @relation(fields: [roleId], references: [id])
  module               Module                 @relation(fields: [moduleId], references: [id])
  roleModulePermission RoleModulePermission[]

  @@unique([roleId, moduleId]) // Clave primaria compuesta
  @@map("role_modules")
}

model RoleModulePermission {
  roleModuleId String @map("role_module_id")
  permissionId String @map("permission_id")

  roleModule RoleModule @relation(fields: [roleModuleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@id([roleModuleId, permissionId]) // Clave primaria compuesta
  @@map("role_module_permissions")
}

model User {
  id                      String       @id @default(uuid())
  name                    String       @unique
  email                   String       @unique
  password                String
  imageUrl                String?
  isEnable                Boolean      @default(true)
  roleId                  String       @map("role_id")
  role                    Role         @relation(fields: [roleId], references: [id])
  createdAt               DateTime     @default(now()) @map("created_at")
  updatedAt               DateTime     @updatedAt @map("updated_at")
  userBranches            UserBranch[]
  hasGlobalBranchesAccess Boolean      @default(false) @map("has_global_branches_access") // Columna para acceso global

  @@map("users")
}

model UserBranch {
  userId   String @map("user_id")
  branchId String @map("branch_id")
  user     User   @relation(fields: [userId], references: [id])

  @@id([userId, branchId]) // Clave primaria compuesta
  @@map("user_branches")
}
