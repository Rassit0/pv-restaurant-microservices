// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductType {
  RawMaterial // Materia prima
  FinalProduct // Producto final
  Supply // Insumo
  Ingredient
  Recipe // Receta que combina productos
}

model Unit {
  id           String   @id @default(uuid()) // El identificador único de la unidad
  name         String   @unique @db.VarChar(100) // Nombre completo de la unidad (Ej. "Kilogramo", "Litro")
  abbreviation String   @unique @db.VarChar(10) // Abreviatura de la unidad (Ej. "kg", "L")
  createdAt    DateTime @default(now()) @map("created_at") // Fecha de creación
  updatedAt    DateTime @updatedAt @map("updated_at") // Fecha de última actualización

  // Relación con los productos
  products Product[] @relation()

  @@map("units") // Mapea este modelo a la tabla 'units' en la base de datos
}

model Product {
  id           String    @id @default(uuid()) // El identificador único del producto, generado como UUID
  name         String    @unique @db.VarChar(100) // Nombre del producto, único en la base de datos
  description  String? // Descripción del producto
  slug         String    @unique
  // price          Decimal   @db.Decimal(10, 2) // Precio del producto, con precisión de 10 dígitos y 2 decimales
  // stock          Decimal     @db.Decimal(10, 2) // Cantidad total en stock del producto
  imageUrl     String?   @map("image_url") // URL de la imagen del producto
  isEnable     Boolean   @default(true) @map("is_enable") // Indica si el producto está habilitado o no

  // Campos relacionados con inventario y logística
  minimumStock Decimal @map("minimun_stock") @db.Decimal(10, 2) // Stock mínimo recomendado antes de realizar un nuevo pedido o preparación
  reorderPoint Decimal @map("reorder_point") @db.Decimal(10, 2) // Nivel de stock que activa una alerta para reabastecimiento

  unitId String @map("unit_id") // ID de la unidad de medida (relacionado con la tabla 'Units')
  unit   Unit   @relation(fields: [unitId], references: [id])

  // Relación de muchos a muchos con 'Category'
  categories Category[] @relation("product_categories")

  // Campos adicional relacionado con el costo
  // purchasePrice Decimal @map("purchase_price") @db.Decimal(10, 2) // Precio de compra del producto

  branchProductStock    BranchProductStock[] // relacion con los stocks por sucursal
  warehouseProductStock WarehouseProductStock[] // relacion con los stocks por almacén

  createdAt       DateTime  @default(now()) @map("created_at") // Fecha de creación del producto, asignada automáticamente con la fecha actual
  updatedAt       DateTime  @updatedAt @map("updated_at") // Fecha de la última actualización del producto, asignada automáticamente en cada cambio
  deletedAt       DateTime? @map("deleted_at")
  createdByUserId String    @map("created_by_user_id") // ID del usuario que crea la receta
  updatedByUserId String?   @map("updated_by_user_id") // ID del usuario que actualiza la receta
  deletedByUserId String?   @map("deleted_by_user_id")

  types            TypeProduct[] // Relación con TypeProduct
  suppliersProduct SupplierProduct[]

  @@map("products") // Mapea este modelo a la tabla 'products' en la base de datos
}

model SupplierProduct {
  id          String @id @default(uuid()) // Clave primaria única
  supplierId String @map("supplier_id") // ID del almacén (viene de otro microservicio)
  productId   String @map("product_id") // ID del producto

  product Product @relation(fields: [productId], references: [id])

  @@unique([supplierId, productId]) // Un almacén solo puede tener un producto único en la relación
  @@map("supplier_products") // Nombre de la tabla en la base de datos
}

model TypeProduct {
  id        String      @id @default(uuid()) // ID único
  productId String
  type      ProductType // Enum con los tipos de productos

  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, type]) // Evita que se repitan combinaciones producto-tipo
  @@map("type_products") // Mapea a la tabla en la DB
}

model Category {
  id          String   @id @default(uuid()) // El campo 'id' es la clave primaria, con un valor único generado por UUID por defecto
  name        String   @unique @db.VarChar(100) // El campo 'name' es único y tiene una longitud máxima de 100 caracteres
  description String // El campo 'description' es de tipo texto, sin límite de longitud
  slug        String   @unique
  imageUrl    String?  @map("image_url") // El campo 'imageUrl' es opcional (indicado por '?'), y se usa para almacenar la URL de la imagen de la categoría
  createdAt   DateTime @default(now()) @map("created_at") // Fecha de creación
  updatedAt   DateTime @updatedAt @map("updated_at") // Fecha de la última actualización

  products Product[] @relation("product_categories") // Relación de muchos a muchos con 'Product'

  subcategories CategoryHierarchy[] @relation("CategoryToSubcategories") // Relación con subcategorías (hijos)
  parents       CategoryHierarchy[] @relation("CategoryToParents") // Relación con padres (muchos a muchos)

  @@map("categories")
}

model CategoryHierarchy {
  id         String @id @default(uuid()) // Clave primaria generada por UUID
  categoryId String @map("category_id")// Clave foránea hacia Category
  parentId   String @map("parent_id")// Clave foránea hacia Category (padre)

  category Category @relation("CategoryToParents", fields: [categoryId], references: [id]) // Relación con la categoría hija
  parent   Category @relation("CategoryToSubcategories", fields: [parentId], references: [id]) // Relación con la categoría padre

  @@map("category_hierarchy")
}

model BranchProductStock {
  id        String   @id @default(uuid())
  productId String   @map("product_id")
  branchId  String   @map("branch_id")
  stock     Decimal  @db.Decimal(10, 2) // Cantidad de stock disponible
  updatedAt DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, branchId]) // Un producto solo puede tener un stock único por sucursal
  @@map("branch_product_stock")
}

model WarehouseProductStock {
  id          String   @id @default(uuid())
  productId   String   @map("product_id")
  warehouseId String   @map("warehouse_id")
  stock       Decimal  @db.Decimal(10, 2) // Cantidad de stock disponible
  updatedAt   DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, warehouseId]) // Un producto solo puede tener un stock único por sucursal
  @@map("warehouse_product_stock")
}
